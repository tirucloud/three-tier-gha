name: Node.js CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'   # adjust as needed

      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: self-hosted
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --exit-code 1

  trivy_fs_scan:
    runs-on: self-hosted
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  sonar-frontend:
    runs-on: self-hosted
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: self-hosted
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: tirucloud/backend:latest
          file: ./api/Dockerfile

  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: tirucloud/frontend:latest
          file: ./client/Dockerfile

  trivy_image_scan:
    runs-on: self-hosted
    needs: build_frontend_docker_image_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy Image Scan (Backend)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: tirucloud/backend:latest
          format: table
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

      - name: Run Trivy Image Scan (Frontend)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: tirucloud/frontend:latest
          format: table
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: trivy_image_scan
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: tiru-cluster

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CLI
        run: |
          echo "Installing AWS CLI..."
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Setup kubectl
        uses: aws-actions/setup-kubectl@v3
        with:
          version: latest

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          kubectl get nodes

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f k8s-prod/sc.yaml
          kubectl apply -f k8s-prod/mysql.yaml
          kubectl apply -f k8s-prod/backend.yaml
          kubectl apply -f k8s-prod/frontend.yaml
          kubectl apply -f k8s-prod/ci.yaml
          kubectl apply -f k8s-prod/ingress.yaml
